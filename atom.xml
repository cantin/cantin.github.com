<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cantin's blog]]></title>
  <link href="http://cantin.github.com/atom.xml" rel="self"/>
  <link href="http://cantin.github.com/"/>
  <updated>2012-08-06T21:31:38+08:00</updated>
  <id>http://cantin.github.com/</id>
  <author>
    <name><![CDATA[cantin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[time_with_zone]]></title>
    <link href="http://cantin.github.com/blog/2012/08/06/time_with_zone/"/>
    <updated>2012-08-06T21:04:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/08/06/time_with_zone</id>
    <content type="html"><![CDATA[<h3>time_with_zone</h3>

<p>在rails中，server time跟传入的time参数在转化有时候会造成一些问题。</p>

<h3>time</h3>

<p>rails默认使用utc的时区存放time，但是在server中需要使用时区设置转换成本地时间</p>

<p>比如: utc为：&#8217;2012-08-08 12:00:00&#8217;,
而时区设置是：config.time_zone = &#8216;Beijing&#8217;, 即&#8217;+0800&#8217;
那么当我们在console取出来事：&#8217;2012-08-08 20:00:00 +0800&#8217;</p>

<p>但是，有时候也会出现不一致的情况</p>

<h3>time params with zone</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:time</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;2012-08-08 12:00:00 +0700&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当上述params传入并save时，在console中取到的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">time</span> <span class="o">=</span> <span class="s1">&#39;2012-08-08 13:00:00 UTC&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#changed to local_time</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span> <span class="o">=</span> <span class="s1">&#39;2012-08-08 21:00:00&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间就多了一个小时，这是因为time中的&#8217;+0700&#8217;</p>

<p>当attribute是datetime时，rails会调用Time.zone.parse(original_time)与time.in_time_zone
<a href="link">https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/time_zone_conversion.rb#L59</a></p>

<p>当没有时区参数的时候，time默认是utc的时区，所以当本地时区是+0800时,
它会减去8小时，将time从utc格式转换为+0800时区的格式。</p>

<p>而当有参数时(如+0700)，time就是+0700时区的，会从+0700转换成+0800, 然后rails取出数据的话
默认是使用utc取出的，即会加上8小时,所以time就出现了错误。</p>

<p>如果要加上+0700的话，应该在application.rb中添加:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">default_timezone</span> <span class="o">=</span> <span class="s1">&#39;#something respond to +0700&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后存入跟取出的time就会一致了</p>

<h3>后记</h3>

<p>这个是time存入跟取出使用了两种不同时区而导致的错误</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proc block]]></title>
    <link href="http://cantin.github.com/blog/2012/07/27/proc-block/"/>
    <updated>2012-07-27T21:23:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/07/27/proc-block</id>
    <content type="html"><![CDATA[<h3>Proc</h3>

<p>在ruby中，block是一种隐形的方法参数, 而不是对象，在方法中直接调用不到，
，但是在方法中可以将其转化为proc对象，从而可以使用proc的方法。</p>

<h3>&amp;操作符</h3>

<p>block转化为proc的方法是&amp;操作符</p>

<h4>block转化proc</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">block</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">method</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Proc</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时的{} 是隐形的参数，method的表面参数是为0，如果传入的是proc对象，
proc对象是表面的参数，则会报ArgumentError: wrong number of arguments (1
for 0)</p>

<h4>proc转化为block</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method</span>
</span><span class='line'>  <span class="k">yield</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;proc&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">method</span> <span class="o">&amp;</span><span class="nb">p</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="nb">proc</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时的proc经过&amp;转换，在method中变为block隐形的参数。
另：&amp;p不可以单独使用, 不可在表达式中使用，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="nb">p</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="n">tAMPER</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="o">&amp;</span><span class="nb">p</span> <span class="p">:</span> <span class="mi">1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">,</span> <span class="n">unexpected</span> <span class="n">tAMPER</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:method</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="nb">proc</span>
</span></code></pre></td></tr></table></div></figure>


<h3>结语</h3>

<p>proc，lamdba，block还是很多不得不说的事&#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundler open]]></title>
    <link href="http://cantin.github.com/blog/2012/05/16/bundler-open/"/>
    <updated>2012-05-16T22:37:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/05/16/bundler-open</id>
    <content type="html"><![CDATA[<h4>bundler</h4>

<p>bundler open 选项可以打开选定的local gem，
但是在使用的时候需要先指定$EDITOR或者$BUNDLER_EDITOR。</p>

<p>这时候可以先执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export EDITOR=vim</span></code></pre></td></tr></table></div></figure>


<p>然后执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle open gem_name</span></code></pre></td></tr></table></div></figure>


<p>这样就可以在vim中打开gem_name所在的目录了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[function js]]></title>
    <link href="http://cantin.github.com/blog/2012/03/22/js_function/"/>
    <updated>2012-03-22T22:49:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/22/js_function</id>
    <content type="html"><![CDATA[<h3>object</h3>

<p>在js中object就是key: value的集合。</p>

<p>function对象也是object对象，但是他们都是以function关键字定义滴。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nb">Object</span> <span class="c1">//function Object() {};</span>
</span><span class='line'>  <span class="nb">Function</span> <span class="c1">//function Function() {};</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个object里面都会有个constructor的key，value一般就是object的function引用。
例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Obkect</span><span class="p">();</span>
</span><span class='line'> <span class="nx">o</span><span class="p">.</span><span class="nx">constructor</span> <span class="c1">// function Object() {}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>function, new 与Object, Function</h3>

<p> function与Function是不同的，function是关键字，而Function是对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">s</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">qq</span> <span class="o">=</span> <span class="s1">&#39;ss&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="nx">s</span>  <span class="c1">//function s() { this.qq = &#39;ss&#39; }</span>
</span><span class='line'><span class="nx">s</span><span class="p">.</span><span class="nx">constructor</span> <span class="c1">// function Function() {}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有的function对象都是由Function这个对象创建出来的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">function</span> <span class="nx">s</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">qq</span> <span class="o">=</span> <span class="s1">&#39;ww&#39;</span> <span class="p">};</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">s</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>与下面代码应该相等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">function</span> <span class="nx">s</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">qq</span> <span class="o">=</span> <span class="s1">&#39;ww&#39;</span> <span class="p">}</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'> <span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'> <span class="nx">o</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">s</span>
</span><span class='line'> <span class="mi">0</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">prototype</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">function</span> <span class="nx">s</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">qq</span> <span class="o">=</span> <span class="s1">&#39;asd&#39;</span> <span class="p">};</span>
</span><span class='line'> <span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</span><span class='line'> <span class="nx">s</span><span class="p">.</span><span class="nx">qq</span><span class="p">;</span>     <span class="c1">// &#39;asd&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>proto</strong></h3>

<p>object都有<strong>proto</strong>属性，其中保存着constructor的prototype</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="c1">//在chrome下</span>
</span><span class='line'> <span class="kd">function</span> <span class="nx">s</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'> <span class="nx">s</span><span class="p">.</span><span class="nx">__proto__</span>  <span class="c1">// function Empty() {}</span>
</span><span class='line'> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// function Empty() {}</span>
</span><span class='line'> <span class="nb">Function</span><span class="p">.</span><span class="nx">__proto__</span> <span class="c1">// function Empty() {}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>prototype</h3>

<p>function对象的属性存放处</p>

<h3>function, object</h3>

<p>object拥有constructor，<strong>proto</strong>属性
function除了拥有上述属性，还拥有prototype属性,还拥有call，apply方法</p>

<h3>后记</h3>

<p>写的还真烂······</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spork reload model]]></title>
    <link href="http://cantin.github.com/blog/2012/03/20/spork-reload-model/"/>
    <updated>2012-03-20T22:33:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/20/spork-reload-model</id>
    <content type="html"><![CDATA[<h4>spork的问题</h4>

<p>使用spork1.0.0rc2在为测试加速时，并不会每次都reload model。
也就是说，使用spork时，如果你model有了一丝改变，那就需要重启spork。
老实说，这相当不方便。</p>

<h4>解决方法1</h4>

<p>(使用的是rspec)在spec_helper.rb里面添加如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="c1"># reload all the models</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/app/models/**/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">load</span> <span class="n">model</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>解决方法2</h3>

<p>前提是使用rspec与factory_girl_rails
在gemfile里面添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>在spec_helper.rb里添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[monkeypatch with hash and array]]></title>
    <link href="http://cantin.github.com/blog/2012/03/18/hash-array-core-ext/"/>
    <updated>2012-03-18T22:00:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/18/hash-array-core-ext</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>几个月前，工作中需要判断一个一个hash中是否包含了另一个hash/array(在更深层次上)，
但ruby中没有提供这样的方法，所以在涛哥的指导下，我写了下列两个方法来
实现这个功能</p>

<h3>array</h3>

<p>array的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contains?</span> <span class="n">array</span>
</span><span class='line'>    <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span>  <span class="n">value</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="n">v</span><span class="o">.</span><span class="n">class</span> <span class="o">&amp;&amp;</span> <span class="n">v</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:contains?</span><span class="p">)</span>
</span><span class='line'>          <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">flag</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>hash</h3>

<p>hash的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contains?</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="kp">include</span><span class="p">?(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:contains?</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="nb">self</span><span class="o">[</span><span class="n">key</span><span class="o">].</span><span class="n">contains?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">value</span> <span class="o">==</span> <span class="nb">self</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>后记</h3>

<p>第一次写ruby的extsion，印象还是很深刻的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generator on rails]]></title>
    <link href="http://cantin.github.com/blog/2012/03/15/rails-generator/"/>
    <updated>2012-03-15T22:27:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/15/rails-generator</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>generator在rails开发中是十分好用的工具,
今晚看了一下rails的generator，闲来无事便将基本的记下来。</p>

<p>guides的链接为<a href="http://guides.rubyonrails.org/generators.html">http://guides.rubyonrails.org/generators.html</a></p>

<p>rails3.0以后的generator是建立在Thor这个gem上的，github的链接为<a href="https://github.com/wycats/thor">https://github.com/wycats/thor</a></p>

<h3>生成generator</h3>

<p>进入rails项目，在终端下输入下列命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">generator</span> <span class="n">generator_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成文件如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/lib/generator/generator_name/USAGE
</span><span class='line'>/lib/generator/generator_name/generator_name.rb
</span><span class='line'>/lib/generator/generator_name/templates/
</span></code></pre></td></tr></table></div></figure>


<p>其中generator_name.rb中是执行generate命令时运行的文件，
USAGE是这个generator的说明，
templates目录下是执行这个generator是需要用到的文件,可在generator_name.rb中改变</p>

<p>若generator_name.rb中有copy_file这个方法
当执行generator命令时，此方法会找到templates下的相应文件copy到rails项目中</p>

<p>具体可以参考guides</p>

<h3>配置generator</h3>

<p>在rails中可以在config/applications.rb配置generator，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">orm</span>             <span class="ss">:active_record</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">template_engine</span> <span class="ss">:erb</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span>  <span class="ss">:test_unit</span><span class="p">,</span> <span class="ss">:fixture</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>后记</h3>

<p>目前还未有用到generator的机会，所以写的实在不是很详细，等以后再来完善吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js与observer]]></title>
    <link href="http://cantin.github.com/blog/2012/03/11/js-observer/"/>
    <updated>2012-03-11T20:41:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/11/js-observer</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>放假的晚上，窝在宿舍，懒懒的。无聊之余就想写一下之前学过的
javascript的observer，免得自己将来真的忘了。</p>

<p>ps：现在真的快忘了。。。。</p>

<h2>javascript与observer</h2>

<h3>为什么需要observer</h3>

<p>在编写js的时候，通常会遇到这样的问题。js中的数据与页面的数据需要保持一致.
比如说在js中的一个model，当它发生改变时，页面上对应的数据必须发生改变。
如果不使用observer的话，我们可能需要自己手动的在方法中调用。这样会导致model
与view的代码紧耦合。一旦需求变动，将很难改动。在这种情况下，我们可以使用observer来
解决这个问题。通过model的注册事件，一旦发生事件，对应的view的代码便会执行，从而达到
一致的目的。</p>

<h3>observer的用法</h3>

<h4>Event对象</h4>

<p>首先，我们需要一个Event对象来存放事件触发后执行的handler与它的scope。</p>

<p>event构造如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">function</span> <span class="nx">Event</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="nx">handler</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">scope</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>model的写法</h4>

<p>在model中，需要有属性如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kd">function</span> <span class="nx">Model</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">event</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="s2">&quot;remove&quot;</span><span class="p">,</span> <span class="s2">&quot;update&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">listener</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中event为数组，存放着当model的事件，当这些事件触发时，会调用listener中对应数组的event对象。
listener是存放event对象的一个对象（或者近似的认为是hash）。
在model里还需要有如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">Model</span><span class="p">.</span><span class="nx">pototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">add</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">.....</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// at the end</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">on</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hasEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Event</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">listener</span><span class="p">[</span><span class="nx">event</span><span class="p">]){</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">listener</span><span class="p">[</span><span class="nx">event</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">listener</span><span class="p">[</span><span class="nx">event</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//private</span>
</span><span class='line'>    <span class="nx">fireEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hasEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">listener</span><span class="p">[</span><span class="nx">event</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">listener</span><span class="p">[</span><span class="nx">event</span><span class="p">][</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">e</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//private</span>
</span><span class='line'>    <span class="nx">hasEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">event</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中private表示此方法不对外提供,
hasEvent是为了判断传入的事件是否是model中注册的事件,
fireEvent是在model在内部调用，用以调用在view在model注册的handler,
on是提供对外的接口，用来让view调用，注册view的handler，
add是model事件函数示例，在让model发生改变的方法中的最下面调用fireEvent，从而达到调用handler的目的。</p>

<p>ps:不负责任的说，Event对象的options参数是我在写这篇文章时候才加进去的，没有经过任何测试，哇哈哈。</p>

<p>ps:再不负责的说，上述方法都是我凭印象写的，正确性应该是可以保证的吧····</p>

<h4>view的写法</h4>

<p>在view中我们需要向model中注册当model发生改变是自动执行的函数，也就是handler.</p>

<p>示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">function</span> <span class="nx">View</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">View</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">view</span><span class="p">.</span><span class="nx">addView</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//something for handle while model fire</span>
</span><span class='line'>    <span class="p">.....</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">view</span><span class="p">.</span><span class="nx">addHandler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="nx">addView</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">view</span><span class="p">.</span><span class="nx">addHandler</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>view的写法有多种，大意就是调用model的on函数。</p>

<h3>小结</h3>

<p>observer的好处在于，当model（或者是其他对象）变化的时候，它能通知到其他注册在上面的对象也发生变化。
这样一方面是全部对象更新的很及时，另一方面是解耦了对象，model（被观察对象？）与view（观察对象？）只需要通过
model的几个函数交互，而不需要知道其他对象的实现细节,同时view可以注册多个handler到model中去，可扩展性比较好。</p>

<p>ps:我还是不知道model与view是谁观察谁·····</p>

<p>ps：文笔感觉还是很不行，见谅见谅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[myql自定义配置]]></title>
    <link href="http://cantin.github.com/blog/2012/03/11/sui-bi/"/>
    <updated>2012-03-11T10:46:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/11/sui-bi</id>
    <content type="html"><![CDATA[<h3>mysql配置</h3>

<p>在mac下默认是没有my.conf的，如果需要定制的话，可以
到/usr/local/Cellar/mysql/5.XX/support-file/目录下
拷贝一份适合的.conf文件到/etc/my.conf</p>

<h3>mysql默认编码</h3>

<p>mysql在mac下的默认编码是utf-8（在我机子上是），
可以使用show varibles like &#8216;character_set%&#8217;;来查询</p>
]]></content>
  </entry>
  
</feed>
