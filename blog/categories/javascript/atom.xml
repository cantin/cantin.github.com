<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | cantin's blog]]></title>
  <link href="http://cantin.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://cantin.github.com/"/>
  <updated>2013-08-27T18:01:53+08:00</updated>
  <id>http://cantin.github.com/</id>
  <author>
    <name><![CDATA[cantin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[function js]]></title>
    <link href="http://cantin.github.com/blog/2012/03/22/js_function/"/>
    <updated>2012-03-22T22:49:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/22/js_function</id>
    <content type="html"><![CDATA[<h3>object</h3>

<p>在js中object就是key: value的集合。</p>

<p>function对象也是object对象，但是他们都是以function关键字定义滴。</p>

<p><code>js
  Object //function Object() {};
  Function //function Function() {};
</code></p>

<p>每一个object里面都会有个constructor的key，value一般就是object的function引用。
例如：</p>

<p><code>js
 var o = new Obkect();
 o.constructor // function Object() {}
</code></p>

<h3>function, new 与Object, Function</h3>

<p> function与Function是不同的，function是关键字，而Function是对象。</p>

<p><code>js
function s() { this.qq = 'ss' }
s  //function s() { this.qq = 'ss' }
s.constructor // function Function() {}
</code>
所有的function对象都是由Function这个对象创建出来的。</p>

<p><code>js
 function s() { this.qq = 'ww' };
 var o = new s();
</code></p>

<p>与下面代码应该相等：</p>

<p><code>js
 function s() { this.qq = 'ww' }
 var o = {};
 s.call(0)
 o.constructor = s
 0.__proto__ = s.prototype
</code>
<code>js
 function s() { this.qq = 'asd' };
 s.call(s);
 s.qq;     // 'asd'
</code></p>

<h3><strong>proto</strong></h3>

<p>object都有<strong>proto</strong>属性，其中保存着constructor的prototype</p>

<p><code>js
 //在chrome下
 function s() {}
 s.__proto__  // function Empty() {}
 Function.prototype // function Empty() {}
 Function.__proto__ // function Empty() {}
</code></p>

<h3>prototype</h3>

<p>function对象的属性存放处</p>

<h3>function, object</h3>

<p>object拥有constructor，<strong>proto</strong>属性
function除了拥有上述属性，还拥有prototype属性,还拥有call，apply方法</p>

<h3>后记</h3>

<p>写的还真烂······</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js与observer]]></title>
    <link href="http://cantin.github.com/blog/2012/03/11/js-observer/"/>
    <updated>2012-03-11T20:41:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/03/11/js-observer</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>放假的晚上，窝在宿舍，懒懒的。无聊之余就想写一下之前学过的
javascript的observer，免得自己将来真的忘了。</p>

<p>ps：现在真的快忘了。。。。</p>

<h2>javascript与observer</h2>

<h3>为什么需要observer</h3>

<p>在编写js的时候，通常会遇到这样的问题。js中的数据与页面的数据需要保持一致.
比如说在js中的一个model，当它发生改变时，页面上对应的数据必须发生改变。
如果不使用observer的话，我们可能需要自己手动的在方法中调用。这样会导致model
与view的代码紧耦合。一旦需求变动，将很难改动。在这种情况下，我们可以使用observer来
解决这个问题。通过model的注册事件，一旦发生事件，对应的view的代码便会执行，从而达到
一致的目的。</p>

<h3>observer的用法</h3>

<h4>Event对象</h4>

<p>首先，我们需要一个Event对象来存放事件触发后执行的handler与它的scope。</p>

<p>event构造如下：</p>

<p>```js
  function Event(handler, scope, options) {</p>

<pre><code>this.handler = handler;
this.scope = scope;
this.options = options;
</code></pre>

<p>  }
```</p>

<h4>model的写法</h4>

<p>在model中，需要有属性如下：</p>

<p>```js
 function Model(options) {
  var event = ["add", "remove", "update"];
  var listener = {};</p>

<p>  ....
 }
```</p>

<p>其中event为数组，存放着当model的事件，当这些事件触发时，会调用listener中对应数组的event对象。
listener是存放event对象的一个对象（或者近似的认为是hash）。
在model里还需要有如下方法：</p>

<p>```js
  Model.pototype = {</p>

<pre><code>add: function() {
  .....

  // at the end
  this.fireEvent('add')
}

on: function(event, handler, scope, options) {
  if(this.hasEvent(event)){
    var e = new Event(handler, scope, options);

    if(!this.listener[event]){
      this.listener[event] = new Array();
    }

    this.listener[event].push(e);
  }
},

//private
fireEvent: function(event) {
  if(this.hasEvent(event)){
    for(var i = 0; i &lt; this.listener[event].length; i++){
      var e = this.listener[event][i];
      e.handler.call(e.scope, options)
    }
  }
},

//private
hasEvent: function(event) {
  for(var i = 0; i &lt; this.event.length; i++){
    if(this.event[i] == event) {
      return true;
    }
  }
  return false;
}
</code></pre>

<p>  }
```</p>

<p>其中private表示此方法不对外提供,
hasEvent是为了判断传入的事件是否是model中注册的事件,
fireEvent是在model在内部调用，用以调用在view在model注册的handler,
on是提供对外的接口，用来让view调用，注册view的handler，
add是model事件函数示例，在让model发生改变的方法中的最下面调用fireEvent，从而达到调用handler的目的。</p>

<p>ps:不负责任的说，Event对象的options参数是我在写这篇文章时候才加进去的，没有经过任何测试，哇哈哈。</p>

<p>ps:再不负责的说，上述方法都是我凭印象写的，正确性应该是可以保证的吧····</p>

<h4>view的写法</h4>

<p>在view中我们需要向model中注册当model发生改变是自动执行的函数，也就是handler.</p>

<p>示例代码如下：</p>

<p>```js
  function View(model) {
   this.model = model;
  }
  var model = new Model();
  var view = new View(model);</p>

<p>  view.addView = function() {</p>

<pre><code>//something for handle while model fire
.....
</code></pre>

<p>  };</p>

<p>  view.addHandler = function() {</p>

<pre><code>this.model.on('add', addView, this);
</code></pre>

<p>  };</p>

<p>  view.addHandler();
```
view的写法有多种，大意就是调用model的on函数。</p>

<h3>小结</h3>

<p>observer的好处在于，当model（或者是其他对象）变化的时候，它能通知到其他注册在上面的对象也发生变化。
这样一方面是全部对象更新的很及时，另一方面是解耦了对象，model（被观察对象？）与view（观察对象？）只需要通过
model的几个函数交互，而不需要知道其他对象的实现细节,同时view可以注册多个handler到model中去，可扩展性比较好。</p>

<p>ps:我还是不知道model与view是谁观察谁·····</p>

<p>ps：文笔感觉还是很不行，见谅见谅。</p>
]]></content>
  </entry>
  
</feed>
