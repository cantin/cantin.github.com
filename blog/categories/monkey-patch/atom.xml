<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monkey_patch | cantin's blog]]></title>
  <link href="http://cantin.github.com/blog/categories/monkey-patch/atom.xml" rel="self"/>
  <link href="http://cantin.github.com/"/>
  <updated>2013-08-27T18:07:28+08:00</updated>
  <id>http://cantin.github.com/</id>
  <author>
    <name><![CDATA[cantin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jquery-rails-monkey-patch]]></title>
    <link href="http://cantin.github.com/blog/2012/11/26/jquery-rails-monkey-patch/"/>
    <updated>2012-11-26T17:57:00+08:00</updated>
    <id>http://cantin.github.com/blog/2012/11/26/jquery-rails-monkey-patch</id>
    <content type="html"><![CDATA[<h2>Jquery-rails monkey patch</h2>

<p>Since Rails 3, unconspicuous javascript(jquery-rails) instead of prototype.js to make
thing easily. It provide a sample way to handle ajax, confirm, etc...</p>

<p>Sometimes jquery-rails couldn't fit for our situation.For example:</p>

<p>With added "confirm: 'this is is a confirm'", the button element
has the confirm function. But We could't dynamically set the text whlie
the confirm appear.</p>

<p>In this case, We can add a monkey patch into jquery-rails to fit for our need.</p>

<p>First of all We look at the source of juqery-rails, figure out what make
this happened.</p>

<p>```ruby
  allowAction: function(element) {</p>

<pre><code>var message = element.data('confirm'),
    answer = false, callback;
if (!message) { return true; }

if (rails.fire(element, 'confirm')) {
  answer = rails.confirm(message);
  callback = rails.fire(element, 'confirm:complete', [answer]);
}
return answer &amp;&amp; callback;
</code></pre>

<p>  },
```</p>

<p>After that, We overwrite this function in application.js</p>

<p>```ruby
  $.rails.allowAction = function(element) {</p>

<pre><code>var rails = $.rails;

var message = element.data('confirm'),
    answer = false, callback;
if (!message) { return true; }

if (rails.fire(element, 'confirm')) {
  message = element.data('confirm');
  answer = rails.confirm(message);
  callback = rails.fire(element, 'confirm:complete', [answer]);
}
return answer &amp;&amp; callback;
</code></pre>

<p>  }
```</p>

<p>Finally, We can dynamically set the confirm text.</p>
]]></content>
  </entry>
  
</feed>
