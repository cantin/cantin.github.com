<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Cantin's blog]]></title>
  <link href="http://linkct.me/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://linkct.me/"/>
  <updated>2013-09-01T13:58:32+08:00</updated>
  <id>http://linkct.me/</id>
  <author>
    <name><![CDATA[Cantin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Currying in Ruby]]></title>
    <link href="http://linkct.me/blog/2013/09/01/curry-in-ruby/"/>
    <updated>2013-09-01T13:26:00+08:00</updated>
    <id>http://linkct.me/blog/2013/09/01/curry-in-ruby</id>
    <content type="html"><![CDATA[<h3>Currying</h3>

<p> <a href="http://en.wikipedia.org/wiki/Currying">Currying</a> is the technique of transforming a function that takes multiple arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single argument .</p>

<p>For instance:</p>

<p>```js
function add(x, y, z) {
  return x + y + z;
}</p>

<p>function add5(y, z) {
  return add(5, y, z);
}</p>

<p>function add5and6(z) {
  return add5(6, z);
}</p>

<p>add5and6(10) => 21
```</p>

<h3>Currying in Proc of Ruby</h3>

<p>In Ruby, Object is the first class, but we still can use it as FP.</p>

<p>Proc is kind of like function, Ruby provide a method named currying in Proc.
This give us a easy way to currying proc like currying function.</p>

<p>Baisc Usage:
```ruby
add = proc { |x, y, z| x + y + z }
add5 = add.curry[5]
add5and6 = add5.curry[6] # equal to add.curry.call(5).call(6)</p>

<p>add5and6.(10) => 21
```</p>

<p>Proc#curry also can take one argument(arity) that limit the quantity of arguments.</p>

<p>For instance:</p>

<p>```ruby
add = proc { |x, y, z| x + y + (z || 0) }
add5 = proc.curry(2)[5]
add5and6 = add5.curry[6] => 11</p>

<h1>z will be ignored cause by the arity is 2</h1>

<p>```</p>

<p>Note: the arity argument in Lambda#curry must equal to the number of arguments in Lambda, otherwise it will raise a ArgumentError.</p>
]]></content>
  </entry>
  
</feed>
